@begin(section)
@title(Formats)

@begin(section)
@title(Existing Formats)

@begin[ref=scriba](section)
@title(Scriba)

Scriba is a markup format with a syntax similar to that of
@link[uri=https://en.wikipedia.org/wiki/Scribe_(markup_language)](Scribe), the
late-seventies markup language.

@begin[lang=scribe](code)
@include[path=example.scr]()
@end(code)

@end(section)

@begin(section)
@title(VerTeX)

VerTeX is a markup format with a
@link[uri=https://en.wikipedia.org/wiki/TeX](TeX) like syntax.

An example of VerTeX syntax is:

@begin[lang=tex](code)
@include[path=example.tex]()
@end(code)

One disadvantage of using VerTeX comes when writing documents with TeX (to be
rendered, say, by @link[uri=https://www.mathjax.org/](MathJax) in the HTML
backend). Because TeX mathematics has operators which would be parsed as VerTeX
syntax (e.g. @c(\int), @c(\sigma)), you either need to escape the slashes or use
the @c(\verb) tag to enter verbatim text. For example:

@begin[lang=tex](code)
@include[path=math.tex]()
@end(code)

As such, documents using TeX extensive should consider @ref[sec=scriba](Scriba).

The parser uses the
@link[uri=https://github.com/Shinmera/plump-tex](@c(plump-tex)) library.

@end(section)

@end(section)

@begin(section)
@title(Defining Formats)

@begin(section)
@title(API)

@cl:with-package[name="common-doc.format"](
@cl:doc(class document-format)
@cl:doc(generic parse-document)
@cl:doc(generic emit-document)
)

@end(section)

@end(section)

@end(section)
