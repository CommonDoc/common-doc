@begin(section)
@title(Extensions)

@begin(section)
@title(Plotting with gnuplot)

The @c(common-doc-gnuplot) system allows you to render plots using gnuplot
commands from inside the document.

@begin(section)
@title(API)

@cl:with-package[name="common-doc.gnuplot"](
@cl:doc(variable *gnuplot-command*)
@cl:doc(variable *gnuplot-default-term*)
@cl:doc(class gnuplot)
)

@end(section)

@begin(section)
@title(Examples)

Rendering a direction field:

@begin[lang=scribe](code)
@include[path=gnuplot.scr start=1 end=12]()
@end(code)

@begin[path=dir-field.png](gnuplot)
@begin(verb)
set xrange [-10:10]
set yrange [-10:10]
set samples 25
set isosamples 25
set key off
dx(x) = x
dy(x) = 2*x
plot "++" using 1:2:(dx($1)):(dy($2)) w vec
@end(verb)
@end(gnuplot)

The sine and cosine functions:

@begin[lang=scribe](code)
@include[path=gnuplot.scr start=14 end=18]()
@end(code)

@begin[path=sin-cos.png](gnuplot)
@begin(verb)
plot sin(x), cos(x)
@end(verb)
@end(gnuplot)

@end(section)

@end(section)

@begin(section)
@title(Diagrams with Graphviz)

The @c(common-doc-graphviz) system allows you to render diagrams using @c(dot) from the Graphviz collection
of graph layout tools.  The Graphviz tool and documentation can be found at @link[uri=https://graphviz.org](Graphviz Home Page).

@begin(section)
@title(API)

@cl:with-package[name="common-doc.graphviz"](
@cl:doc(variable *dot-command*)
@cl:doc(class graphviz)
)
@end(section)

@begin(section)
@title(Example)

@begin[lang=scribe](code)
@include[path=graphviz.scr]()
@end(code)

@begin[path=graphviz-example.svg format=svg](graphviz)
@begin(verb)
digraph G {
  node [shape=box];
  src [label="Source Code"];
  doc [label="Doc Files (.scr)"];
  codex;
  html;
  src -> codex -> html;
  doc -> codex;
  }
@end(verb)
@end(graphviz)

@end(section)
@end(section)

@begin(section)
@title(PlantUML Diagrams)

The @c(common-doc-plantuml) system adds the feature to create UML diagrams using PlantUML.
Documentation of the PlantUML language and tools can be found at @link[uri=https://plantuml.com](PlantUML Homepage).
@begin(section)
@title(API)

@cl:with-package[name="common-doc.plantuml"](
@cl:doc(variable *plantuml-command*)
@cl:doc(class plantuml)
)

@end(section)

@begin(section)
@title(Examples)

@begin[lang=scribe](code)
@include[path=plantuml.scr]()
@end(code)

@begin[path=plantuml-example.svg format=svg](plantuml)
@begin(verb)
@startuml
class plantuml {
  path : string
  output-format : string
  expand-macro (plot)
}
class macro-node {
  name : string
}
class document-node {
  metadata : hash-table
  reference : string
}
"macro-node" <|-- plantuml
"document-node" <|-- "macro-node"
@enduml
@end(verb)
@end(plantuml)

@end(section)

@end(section)
@begin(section)
@title(Include Files)

The @c(common-doc-include) contrib loads external text files into the
document. The @c(path) attribute is the path to the file, and the optional
@c(start) and @c(end) attributes can be used to specify a numeric range of
lines.

@begin(section)
@title(API)

@cl:with-package[name="common-doc.include"](
@cl:doc(class include)
)

@end(section)

@begin(section)
@title(Examples)

The @link[uri=https://github.com/CommonDoc/common-doc/tree/master/docs](source
code) of this documentation uses @c(common-doc-include) extensively.

@end(section)

@end(section)

@begin(section)
@title(Split Paragraphs)

The @c(common-doc-split-paragraphs) contrib splits text nodes on double newlines
into separate paragraphs.

@begin(section)
@title(API)

@cl:with-package[name="common-doc.split-paragraphs"](
@cl:doc(variable *paragraph-separator-regex*)
@cl:doc(generic split-paragraphs)
)

@end(section)

@begin(section)
@title(Examples)

@code[lang=lisp](@include[path=split.lisp]())

@end(section)

@end(section)

@begin(section)
@title(TeX)

The @c(common-doc-tex) contrib is just a couple of macros that expand to TeX
notation. They are useful for two reasons:

@begin(enum)
@item(Using them is more semantic than using the resulting @c($...$) syntax.)
@item(The macroexpansion can be overriden.)
@end(enum)

@begin(section)
@title(API)

@cl:with-package[name="common-doc.tex"](
@cl:doc(class tex)
@cl:doc(class tex-block)
)

@end(section)

@begin(section)
@title(Examples)

The following Scriba input:

@code[lang=scribe](@include[path=tex.scr start=1 end=5]())

Expands to the following:

@code[lang=scribe](@include[path=tex.scr start=7]())

@end(section)

@end(section)

@end(section)
